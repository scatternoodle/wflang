{
  "trace update": {
    "scope": "go",
    "prefix": "trace update",
    "body": ["p.trace.trace(\"$1\")", "defer p.trace.untrace(\"$1\")"],
    "description": "trace calls for parser func"
  },

  "error wrap simple": {
    "scope": "go",
    "prefix": "ewrap",
    "body": [
      "wrap := func(e error) error { return fmt.Errorf(\"$1: %w\", e) }"
    ],
    "description": "very simple error wrapper func"
  },

  "param simple": {
    "scope": "go",
    "prefix": "paramSimple",
    "body": ["{Name: $1, Types: pT{$2}},"],
    "description": "quick definition of a simple (required) wflang function param"
  },

  "param optional": {
    "scope": "go",
    "prefix": "paramOptional",
    "body": ["{Name: $1, Types: pT{$2}, Optional: true},"],
    "description": "quick definition of an optional wflang function param"
  },

  "param full": {
    "scope": "go",
    "prefix": "paramFull",
    "body": [
      "{Name: $1, Types: pT{$2}, Optional: $3, List: $4, PairA: $5, PairB: $6},"
    ],
    "description": "full definition of a simple wflang function param"
  },

  "testhelp wanttype": {
    "scope": "go",
    "prefix": "testhelp.AssertType",
    "body": ["testhelp.AssertType[$1](t, $2)"],
    "description": "testhelp.AssertType helper"
  },

  "testfunc": {
    "scope": "go",
    "prefix": "testfunc",
    "body": ["func $1(t *testing.T) {", "\t$0", "}"],
    "description": "standard testing function declaration"
  },

  "testArray": {
    "scope": "go",
    "prefix": "testArray",
    "body": ["tests := []struct{", "\tname string", "\t$0", "}{}"],
    "description": "create a slice of test structs"
  },

  "lsphandler": {
    "scope": "go",
    "prefix": "server.handlerFunc",
    "body": [
      "func(srv *Server) $1(w io.Writer, c []byte, id *int) {",
      "\t$0",
      "}"
    ]
  }
}
