package builtins

import "github.com/scatternoodle/wflang/lang/types"

type Builtin struct {
	Name string
	Type types.BaseType
}

func Builtins() map[string]Builtin {
	return map[string]Builtin{
		"if":                           {"if", types.BOOL},
		"min":                          {"min", types.NUMBER},
		"max":                          {"max", types.NUMBER},
		"contains":                     {"contains", types.BOOL},
		"sum":                          {"sum", types.NUMBER},
		"count":                        {"count", types.NUMBER},
		"sumtime":                      {"sumTime", types.NUMBER},
		"counttime":                    {"countTime", types.NUMBER},
		"findfirsttime":                {"findFirstTime", types.NUMBER},
		"sumschedule":                  {"sumSchedule", types.NUMBER},
		"countschedule":                {"countSchedule", types.NUMBER},
		"findfirstschedule":            {"findFirstSchedule", types.SCHEDREC},
		"countexception":               {"countException", types.NUMBER},
		"findfirsttordetail":           {"findFirstTorDetail", types.TORDTL},
		"findfirstdayforward":          {"findFirstDayForward"},
		"findfirstdaybackward":         {"findFirstDayBackward"},
		"findfirstdeletedtime":         {"findFirstDeletedTime"},
		"longestconsecutiverange":      {"longestConsecutiveRange"},
		"firstconsecutiveday":          {"firstConsecutiveDay"},
		"lastconsecutiveday":           {"lastConsecutiveDay"},
		"findnthtime":                  {"findNthTime"},
		"accrued":                      {"accrued", types.NUMBER},
		"accruedbefore":                {"accruedBefore", types.NUMBER},
		"balance":                      {"balance", types.NUMBER},
		"callsql":                      {"callSql"},
		"convertdttmbytimezone":        {"convertDttmByTimezone"},
		"countgroupcalc":               {"countGroupCalc", types.NUMBER},
		"countholidays":                {"countHolidays", types.NUMBER},
		"getholiday":                   {"getHoliday", types.STRING},
		"counthomecrewmembers":         {"countHomeCrewMembers", types.NUMBER},
		"countshiftchanges":            {"countShiftChanges", types.NUMBER},
		"employee_attribute_exists":    {"employee_attribute_exists", types.BOOL},
		"employee_attribute":           {"employee_attribute"},
		"getattributecalcdate":         {"getAttributeCalcDate"},
		"getbooleanfieldfromtor":       {"getBooleanFieldFromTor", types.BOOL},
		"getdatefieldfromtor":          {"getDateFieldFromTor"},
		"getnumberfieldfromtor":        {"getNumberFieldFromTor", types.NUMBER},
		"getpaycurrencycode":           {"getPayCurrencyCode", types.STRING},
		"getselectfieldvaluefromtor":   {"getSelectFieldValueFromTor"},
		"getstringfieldfromtor":        {"getStringFieldFromTor", types.STRING},
		"getsysdatebytimezone":         {"getSysDateByTimezone"},
		"ldlookup":                     {"ldLookup"},
		"ldvalidate":                   {"ldValidate"},
		"indexof":                      {"indexof", types.NUMBER},
		"lengthofservice":              {"lengthOfService", types.NUMBER},
		"makedate":                     {"makeDate", types.DATE},
		"makedatetime":                 {"makeDateTime", types.DTTM},
		"makedatetimerange":            {"makeDateTimeRange", types.DTTMRNG},
		"paycodeinschedulemap":         {"payCodeInScheduleMap", types.BOOL},
		"paycodeintimesheetmap":        {"payCodeInTimeSheetMap", types.BOOL},
		"rangelookup":                  {"rangeLookup"},
		"round":                        {"round", types.NUMBER},
		"roundup":                      {"roundUp", types.NUMBER},
		"rounddown":                    {"roundDown", types.NUMBER},
		"roundtoint":                   {"roundToInt", types.NUMBER},
		"semimonthlyperiod":            {"semiMonthlyPeriod"},
		"substr":                       {"substr", types.STRING},
		"tolowercase":                  {"tolowercase", types.STRING},
		"touppercase":                  {"touppercase", types.STRING},
		"minschedule":                  {"minSchedule", types.NUMBER},
		"maxschedule":                  {"maxSchedule", types.NUMBER},
		"avgschedule":                  {"avgSchedule", types.NUMBER},
		"mintime":                      {"minTime", types.NUMBER},
		"maxtime":                      {"maxTime", types.NUMBER},
		"avgtime":                      {"avgTime", types.NUMBER},
		"swipe_in_latitude_in_range":   {"Swipe_in_latitude_in_range"},
		"swipe_in_longitude_in_range":  {"Swipe_in_longitude_in_range"},
		"swipe_out_latitude_in_range":  {"Swipe_out_latitude_in_range"},
		"swipe_out_longitude_in_range": {"Swipe_out_longitude_in_range"},
		"sumexception":                 {"sumException", types.NUMBER},
		"minexception":                 {"minException", types.NUMBER},
		"maxexception":                 {"maxException", types.NUMBER},
		"averageexception":             {"averageException", types.NUMBER},
	}
}
